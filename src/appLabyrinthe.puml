@startuml

package app {
    package model {
        interface BoardObserver {
            + updateBoard(tiles Tile[*]): void
            + updatePlayer(<Player, Vector2D> player): void
        }

        class Board{
            - {final} SIZE: Integer
            + <<create>> Board()
            + initBoard(setTiles Tile[*]);
            - createBoard(setTiles Tile[*])
            + ChangeTileCol(x: Integer): Tile
            + ChangeTileCol2(x: Integer): Tile
            + ChangeTileRow(y: Integer): Tile
            + ChangeTileRow2(y: Integer): Tile
            + getTileAtPosition(x: Integer, y: Integer): Tile
            + addPlayer(player: Player, position: Vector2D)
            + getPlayer(): <Player, Integer[]>
            + movePlayer(player: Player, dir: Direction):
            + addObserver(observer: Observer)
            + removeObserver(observer: Observer)
            + removeObserver(Integer: index)
            + notifyObserversBoard()
            + notifyObserversPlayer()
            + getSize(): Integer
        }
        Player "1" o-* "1" Vector2D
        (Player, Vector2D) .. "*\n- m_playersPositions" Board

        Board o--> "*\n- _board" Tile
        Board o--> "1\n- _lastTile" Tile
        Board o--> "*\n- _observers" BoardObserver

        class Player{
            - _goalSuccessful: Integer
            - _goalNotSuccessful: Integer
            + <<create>> Player(goals: Goal[*])
            + isRestGoal(): Boolean
            + nextGoal()
            + getCurrentGoal():Goal
            + getGoalSuccessful(): Integer
            + getGoalNotSuccessful(): Integer
            + toString(): String
        }
        Player o-->"*\n- _goalStack" Goal

        class Tile{
            - _pathImg: String
            + <<create>> Tile(goal: Goal, possibleDirections: Direction[*], path: String)
            + rotate()
            + existGoal(): Boolean
            + getGoal(): Goal
            + getDirection(): Direction[*]
            + isDirectionPossible(dir: Direction)
            + getPath():String
            + toString(): String
        }
        Tile o-->"1\n- _goal" Goal: > have
        Tile o-->"*\n- _possibleDirections" Direction: > can

        class TileFactory{
            + <<create>> TileFactory
            + createT(): Tile
            + createI(): Tile
            + createL(): Tile
            + createT(goal: Goal): Tile
            + createI(goal: Goal): Tile
            + createL(goal: Goal): Tile
        }

        enum Goal{
            TEST
        }
        enum Direction{
            NORTH,
            EAST,
            SOUTH,
            WEST
        }

        class Vector2D
        {
            - _x: Integer
            - _y: Integer
            <<create>> Vector2D()
            + moveLeft()
            + moveRight()
            + moveTop()
            + moveBottom()
            + getX(): Integer
            + getY(): Integer
        }

    }
    package controller {
        class GameController{
            + <<create>> GameController(bd: Board)
            + initGame()
            + createGame()
            + generatePlayers()
        }
        GameController o--> "1\n - _board" app.model.Board
        GameController o--> "1\n - _currentTile" app.model.Tile
    }
    package view {
        class LabyrinthDisplay implements app.model.BoardObserver {
            + <<create>> LabyrinthDisplay()
            + display(str: String)
            + updateBoard(tiles Tile[*]): void
            + updatePlayer(<Player, Vector2D> player): void
        }
    }
}

class App {
    + {static} main(args: String[*])
}

GameController ..> TileFactory: "uses"
GameController ..> Player: "uses"
TileFactory ..> Tile: "uses"
Board ..> Player: "uses"
GameController ..> Board: "uses"
Board ..> Tile: "uses"

@enduml