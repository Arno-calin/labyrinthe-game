@startuml

package app {
    package model {

        class Board{
            - {final} size: Integer
            - _paths: Boolean[*]
            + <<create>> Board(setTiles Tile[*])
            - createBoard(setTiles Tile[*])
            - createPaths()
            + ChangeTileCol(x: Integer): Tile
            + ChangeTileRow(y: Integer): Tile
            - changePathsCol(x: Integer)
            - changePathsRow(y: Integer)
            + getTileAtPosition(x: Integer, y: Integer)
            ~ getPaths(): Boolean[*]
            + addObserver(observer: Observer)
            + removeObserver(observer: Observer)
            + notifyObservers()
            + getSize(): Integer
        }
        Board o--> "*\n- _board" Tile
        Board o--> "*\n- _observers" BoardObserver
        class Player{
            - _goalSuccessful: Integer
            - _goalNotSuccessful: Integer
            + <<create>> Player(goals: Goal[*])
            + isRestGoal(): Boolean
            + nextGoal()
            + getCurrentGoal():Goal
            + getGoalSuccessful(): Integer
            + getGoalNotSuccessful(): Integer
        }
        Player o-->"*\n- _goalStack" Goal
        Player o--> "1\n- _currentGoal" Goal



        class Tile{
            + <<create>> Tile(goal: Goal, possibleDirections: Direction[*])
            + rotate()
            + existGoal(): Boolean
            + getGoal(): Goal
            + getForm(): Direction[*]
            + toString(): String
        }
        Tile o-->"1\n- _goal" Goal: > have
        Tile o-->"*\n- _possibleDirections" Direction: > can

        class TileFactory{
            + <<create>> TileFactory
            + createT(): Tile
            + createI(): Tile
            + createL(): Tile
            + createT(goal: Goal): Tile
            + createI(goal: Goal): Tile
            + createL(goal: Goal): Tile
        }

        enum Goal{
            TEST
        }
        enum Direction{
            NORTH,
            EAST,
            SOUTH,
            WEST
        }
        interface BoardObserver {
            + updateBoard(b: Board): void
        }
    }
    package controller {
        class Game{
            + <<create>> Game()
            + initGame()
        }
    }
    package view {
        class View implements app.model.BoardObserver {
            + <<create>> View()
            + updateBoard(b: Board):void <<overrides>>
        }
    }
}


class App {
    + {static} main(args: String[*])
}







Game ..> TileFactory: "uses"
TileFactory ..> Tile: "uses"
Board ..> Player: "uses"
Game ..> Board: "uses"
Board ..> Tile: "uses"



@enduml