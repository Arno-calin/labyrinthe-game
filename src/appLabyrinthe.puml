@startuml

package app {
    package model {
        interface BoardObserver {
            + updateBoard(tiles Tile[*])
            + updatePlayer(<Player, Vector2D> player)
            + updateTile(tile: Tile);
        }

        class Board{
            - {final} SIZE: Integer
            + <<create>> Board()
            + initBoard(setTiles Tile[*]);
            - createBoard(setTiles Tile[*])
            + changeByDirection(dir: Direction, numRowCol: Integer, newTile: Tile): Tile
            - changeByNorth(numCol: Integer, newTile Tile): Tile
            - changeBySouth(numCol: Integer, newTile Tile): Tile
            - changeByEast(numRow: Integer, newTile Tile): Tile
            - changeByWest(numRow: Integer, newTile Tile): Tile

            + addPlayer(player: Player, position: Vector2D)
            + getTileAtPosition(x: Integer, y: Integer): Tile
            + getBoard(): Tile[*]
            + getPlayer(): <Player, Integer[]>
            + getSize(): Integer
            + getAloneTile(): Tile
            + setAloneTile(tile: Tile)

            + notifyObserversBoard()
            + notifyObserversPlayer()
            + notifyObserversTile()

            + rotate()
            + movePlayer(player: Player, direction: Direction):
            + addObserver(observer: Observer)
            + removeObserver(observer: Observer)
            + removeObserver(Integer: index)
        }
        Player "1" o-* "1" Vector2D
        (Player, Vector2D) .. Board: *\n- _playersPositions

        Board o--> "*\n- _board" Tile: > is composed of
        Board o--> "1\n- _aloneTile" Tile: > have
        Board o--> "*\n- _observers" BoardObserver: > is observed by

        class Player{
            - _goalSuccessful: Integer
            - _goalNotSuccessful: Integer
            + <<create>> Player(goals: Goal[*])
            + getGoalSuccessful(): Integer
            + getGoalNotSuccessful(): Integer
            + isRestGoal(): Boolean
            + nextGoal()
            + getCurrentGoal():Goal
            + toString(): String
        }
        Player o-->"*\n- _goalStack" Goal: > the stack of goals 

        class Tile{
            - _pathImg: String
            + <<create>> Tile(goal: Goal, form: Direction[*], path: String)
            + rotate()
            + existGoal(): Boolean
            + getDirection(): Direction[*]
            + getGoal(): Goal
            + isDirectionPossible(dir: Direction): Boolean
            + getPath():String
            + toString(): String
        }
        Tile o-->"1\n- _goal" Goal: > have
        Tile o-->"*\n- _possibleDirections" Direction: > can move 

        class TileFactory{
            + <<create>> TileFactory
            + createT(): Tile
            + createI(): Tile
            + createL(): Tile
            + createT(goal: Goal): Tile
            + createI(goal: Goal): Tile
            + createL(goal: Goal): Tile
        }

        enum Goal{
            WITCH_HAT,
            KEY,
            RING,
            CHANDELIER,
            TREASURE_MAP,
            CROWN,
            SWORD,
            SPELL_BOOK,
            MAGIC_WAND,
            SHIELD,
            MAGIC_POTION,
            TREASURE_CHEST,
            GHOST,
            DRAGON,
            BAT,
            SPIDER,
            GNOME,
            FAIRY,
            SKELETON,
            GRIFFIN,
            GOBLIN,
            MINOTAUR,
            UNICORN,
            PHOENIX,
            TROLL
        }
        enum Direction{
            NORTH,
            EAST,
            SOUTH,
            WEST
        }

        class Vector2D
        {
            - _x: Integer
            - _y: Integer
            + <<create>> Vector2D()
            + moveLeft()
            + moveRight()
            + moveTop()
            + moveBottom()
            + getX(): Integer
            + getY(): Integer
        }

    }
    package controller 
    {
        class GameController
        {
            - _currentPlayer: Integer
            + <<create>> GameController(bd: Board)
            + initGame()
            - generatePlayers()
            - generateBoard(): Tile[*]
            + rotateLeft()
            + rotateRight()
            + pushCardsOnBoard(dir: Direction, numRowCol)
            + movePlayer(direction: Direction)
            + endTurn()
        }
        GameController o--> "1\n - _board" app.model.Board: > controlle
        GameController *--> "*\n - _players" app.model.Player: > create 
    }

    package view 
    {
        class LabyrinthDisplay implements app.model.BoardObserver
        {
            - {final} WIDTH: Integer
            - {final} HEIGHT: Integer
            + <<create>> LabyrinthDisplay(controller: GameController)
            + display(str: String)
            + getTileImage(tile: Tile): Image
            + updateBoard(tiles Tile[*]): void
            + updatePlayer(<Player, Vector2D> player): void
            + updateTile(tile: Tile)
        }
    }

    LabyrinthDisplay ..> helpers.ImageHelper: <<uses>>

    package helpers{
        class ImageHelper
        {
            + {static} merge(backgroundPath: String, foregroundPaths: String): BufferedImage
            + {static} rotate(original: final BufferedImage, angle: Float): 
            + {static} rotateClockwise(original: final BufferedImage): 
            + {static} rotateCounterClockwise(original: final BufferedImage): 
            + {static} toBufferedImage(img: Image): BufferedImage 
        }
    }
}

class App {
    + {static} main(args: String[*])
}

TileFactory ..> Tile: <<create>>
Board ..> Direction: <<uses>>
Board ..> Player: <<uses>>
Board ..> Tile: <<uses>>
GameController ..> TileFactory: <<uses>>
GameController ..> Player: <<create>>
GameController ..> Board: <<uses>>
GameController ..> Direction: <<uses>>
GameController ..> Goal: <<uses>>
LabyrinthDisplay ..> Tile: <<uses>>
LabyrinthDisplay ..> Goal: <<uses>>
LabyrinthDisplay ..> Player: <<uses>>
LabyrinthDisplay ..> Vector2D: <<uses>>
App ..> app.model.Board: <<uses>>
App ..> app.controller.GameController: <<uses>>
App ..> app.view.LabyrinthDisplay: <<uses>>

@enduml