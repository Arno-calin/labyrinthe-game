@startuml

package app {
    package model {
        interface BoardObserver {
            + updateBoard(tiles: Tile[*], players: <Player, Vector2D>);
            + updatePlayer(players: <Player, Vector2D>);
            + updateCurrentPlayer(player: Player);
            + updateTile(tile: Tile);
            + updatePossibleDirections(possibleDirections: Direction[*]);
        }

        class Game
        {
            + <<create>> Game()
            + initGame()
            + changeByDirection(dir: Direction, numRowCol: Integer, newTile: Tile): Tile
            + getAloneTile(): Tile
            + setAloneTile(tile: Tile)

            + addObserver(observer: BoardObserver)
            + removeObserver(observer: BoardObserver)
            + removeObserver(index: Integer)
            + notifyObserversCurrentPlayer()
            + notifyObserversBoard()
            + notifyObserversPlayer()
            + notifyObserversTile()
            + notifyPossibleDirections()

            + rotateAloneTile()
            + changePossibleDirection()
            + movePlayer(direction: Direction)
            + nextGoalCurrentPlayer()
            + ifCurrentPlayerWin(): Boolean
            + getTileCurrentPlayer(): Tile
            + isMovable(numRowCol: Integer): Boolean
            + nextTurn()
            + endTurn()
        }
        Game o--> "*\n- _observers" app.model.BoardObserver
        Game *--> "1\n- _players"playerManagement
        Game *--> "1\n- _aloneTile" Tile
        Game *--> "1\n- _board" Board
        Game o--> "*\n- _possibleDirectionsOfCurrentPlayer"Direction

        class playerManagement
        {
            - {final} NAME : String[]
            - {final} PLAYER_NUMBER: Integer
            - _currentPlayer: Integer
            + <<create>> playerManagement()
            + generatePlayers()
            - addPlayer(player: Player, position: Vector2D)
            + getCurrentPlayer(): Player
            + nextPlayer()
            + getPositionCurrentPlayer(): Vector2D
            + movePlayer(direction: Direction)
            + getPlayer(): <Player, Vector2D>
            + getCurrentGoalCurrentPlayer(): Goal
            + nextGoalCurrentPlayer()
            + ifCurrentPlayerRestGoal(): Boolean
        }
        Player "1" o-* "1" Vector2D
        (Player, Vector2D) .. playerManagement: *\n- _playersPositions
        playerManagement *--> "*\n- _players"Player

        class Board{
            - {final} SIZE: Integer
            + <<create>> Board()
            + initBoard()
            - generateBoard()
            - createBoard(setTiles Tile[*])

            + changeByNorth(numCol: Integer, newTile Tile): Tile
            + changeBySouth(numCol: Integer, newTile Tile): Tile
            + changeByEast(numRow: Integer, newTile Tile): Tile
            + changeByWest(numRow: Integer, newTile Tile): Tile

            + isMovable(numRowCol: Integer): Boolean
            + getTileAtPosition(x: Integer, y: Integer): Tile
            + getBoard(): Tile[*]
            + getSize(): Integer
        }
        Board o--> "*\n- _board" Tile: > is composed of

        class Player{
            - _goalSuccessful: Integer
            - _goalMax: Integer
            - _name: String
            + <<create>> Player(goals: Goal[*])
            + getGoalSuccessful(): Integer
            + getGoalMaxNumber(): Integer
            + isRestGoal(): Boolean
            + nextGoal()
            + getCurrentGoal():Goal
            + getName(): String
            + toString(): String
        }
        Player o-->"*\n- _goalStack" Goal: > the stack of goals 

        class Tile{
            - _pathImg: String
            + <<create>> Tile(goal: Goal, form: Direction[*], path: String)
            + rotate()
            + existGoal(): Boolean
            + getDirection(): Direction[*]
            + getGoal(): Goal
            + isDirectionPossible(dir: Direction): Boolean
            + getPathImg():String
            + toString(): String
        }
        Tile o-->"1\n- _goal" Goal: > have
        Tile o-->"*\n- _possibleDirections" Direction: > can move 

        class TileFactory{
            - {final} _path: String
            + <<create>> TileFactory
            + createT(): Tile
            + createI(): Tile
            + createL(): Tile
            + createT(goal: Goal): Tile
            + createI(goal: Goal): Tile
            + createL(goal: Goal): Tile
        }

        enum Goal{
            WITCH_HAT,
            KEY,
            RING,
            CHANDELIER,
            TREASURE_MAP,
            CROWN,
            SWORD,
            SPELL_BOOK,
            MAGIC_WAND,
            SHIELD,
            MAGIC_POTION,
            TREASURE_CHEST,
            GHOST,
            DRAGON,
            BAT,
            SPIDER,
            GNOME,
            FAIRY,
            SKELETON,
            GRIFFIN,
            GOBLIN,
            MINOTAUR,
            UNICORN,
            PHOENIX,
            TROLL
        }
        enum Direction{
            NORTH,
            EAST,
            SOUTH,
            WEST
        }

        class Vector2D
        {
            - _x: Integer
            - _y: Integer
            + <<create>> Vector2D()
            + moveLeft()
            + moveRight()
            + moveTop()
            + moveBottom()
            + getX(): Integer
            + getY(): Integer
        }

    }
    package controller 
    {
        class GameController
        {
            + <<create>> GameController(game: Game)
            + initGame()
            + rotateLeft()
            + rotateRight()
            + pushCardsOnBoard(dir: Direction, numRowCol: Integer)
            + movePlayer(direction: Direction)
            + endTurn()
            + isMovable:Boolean
        }
        GameController o--> "1\n - _game" app.model.Game: > controlle
    }

    package view 
    {
        class LabyrinthDisplay implements app.model.BoardObserver
        {
            - {final} WIDTH: Integer
            - {final} HEIGHT: Integer
            - _pnlContentPane: JPanel
            - _pnlTop: JPanel
            - _pnlMiddle: JPanel
            - _pnlBottom: JPanel
            - _pnlPlayerInfo: JPanel
            - _currentTilePanel: JPanel
            - _currentTile: Tile
            - _controller: GameController
            - _playerLabels: JLabel[]

            + <<create>> LabyrinthDisplay(controller: GameController)
            - initializeTopPanel()
            - initializeMiddlePanel()
            - initializeBottomPanel()
            - layoutMainPanel()
            + display(message: String)
            + getTileImage(tile: Tile): BufferedImage

            + updateBoard(tiles: Tile[*], players: <Player, Vector2D>);
            + updatePlayer(players: <Player, Vector2D>);
            + updateCurrentPlayer(player: Player);
            + updateTile(tile: Tile);
            + updatePossibleDirections(possibleDirections: Direction[*]);
        }
    }

    LabyrinthDisplay ..> helpers.ImageHelper: <<uses>>

    package helpers{
        class ImageHelper
        {
            + {static} merge(bg: BufferedImage, fg: BufferedImage  ): BufferedImage
            + {static} rotate(original: BufferedImage, angle: Float):
            + {static} rotateClockwise(original: BufferedImage):
            + {static} rotateCounterClockwise(original: BufferedImage):
        }
    }
}

class App {
    + {static} main(args: String[*])
}



@enduml